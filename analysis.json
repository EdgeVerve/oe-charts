{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`oe-chart`\n `<oe-chart>` is a charting library which provides polymer based charting components.\n\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCSS Variable | Description | Default\n----------------|-------------|----------\n`--custom-variable-1` | Description of variable | `default value`\n`--custom-mixin-1` | Description of mixin | {}",
      "summary": "",
      "path": "oe-chart.js",
      "properties": [
        {
          "name": "aggregateFunctions",
          "type": "Object",
          "description": "Map of aggregation functions for different aggregation types like sum,average,etc",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 249,
              "column": 2
            },
            "end": {
              "line": 266,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "chartTypes",
          "type": "Object",
          "description": " Getter to get the chart Type mappings\n ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 2
            },
            "end": {
              "line": 287,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "chartType",
          "type": "string | null | undefined",
          "description": "Rendered chart's type.\nSupported chart types :\narea, bubble, groupedbar, line, pareto, pie, donut, normalizedstackedcolumn, stackedbar, stackedcolumn, groupedcolumn, and mapview",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 128,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"groupedColumn\""
        },
        {
          "name": "_renderContainerId",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "data",
          "type": "Array | null | undefined",
          "description": "Data used to render the chart , if dataUrl is provided this property is not needed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "category",
          "type": "string | null | undefined",
          "description": "Used to define the x-axis in chart.\nIt accepts a property name from individual elements of provided data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 154,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "categoryAggregator",
          "type": "string | null | undefined",
          "description": "Option for the type of aggregation to be done on the category when the values are of 'date'.\nValues to be provided are : \"year\" , \"quarter\" , \"month\" or any DateUtil format like 'DD','MM',etc.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "categorylabelFormat",
          "type": "string | null | undefined",
          "description": "Prefix for the label of x-axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "series",
          "type": "Array | null | undefined",
          "description": "Array of objects specifing how the data is rendered across category.\nThe objects should be of the below structure.\n\n```\n{\n 'property':'country',   //Property of the data to plot\n 'aggregation':'sum',    //Aggregation done on data for the property\n 'color':'red'           //Color of the portion of chart representing this data\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "dataUrl",
          "type": "string | null | undefined",
          "description": "Url to be used to fetch the data for the charts.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_dataUrlChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "_changeStreamUrl",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 6
            },
            "end": {
              "line": 214,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_registerChangeStream\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "noDataMessage",
          "type": "string | null | undefined",
          "description": "Empty state message when no data is found.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"No Data Found\""
        },
        {
          "name": "_drawNew",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 6
            },
            "end": {
              "line": 230,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        }
      ],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "_deepSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-common-mixin.js",
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          },
          "inheritedFrom": "OECommonMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 2
            },
            "end": {
              "line": 242,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getGUID",
          "description": "Generates a random GUID used to unqiuely identify the chart container",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 2
            },
            "end": {
              "line": 297,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "GUID string"
          }
        },
        {
          "name": "_init",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 2
            },
            "end": {
              "line": 303,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_parameterChanged",
          "description": "Checks if the chart is to be rendered from 'data' property or fetched from 'series' object,\nand calls checkrender function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 2
            },
            "end": {
              "line": 316,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_checkAndRender",
          "description": "Checks for valid data and renders the chart after it is structured for chart.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 331,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Array",
              "description": "list of objects to render the chart."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isDataStructured",
          "description": "Validates if the data is a chart configuration.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 343,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartData",
              "type": "Object",
              "description": "object containing information to render the chart"
            }
          ]
        },
        {
          "name": "_getSeriesData",
          "description": "Computes series data from the data and series.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 373,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "array",
              "description": "list of data to draw chart"
            },
            {
              "name": "series",
              "type": "string",
              "description": "column to get from row"
            },
            {
              "name": "aggregation",
              "type": "function",
              "description": "aggregation function applied"
            }
          ],
          "return": {
            "type": "array",
            "desc": "list of computed data after aggregation."
          }
        },
        {
          "name": "_getGroups",
          "description": "Computes the groups from the list of data",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 2
            },
            "end": {
              "line": 411,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "array",
              "description": "array of data to group"
            },
            {
              "name": "category",
              "type": "string",
              "description": "property to group the data on"
            },
            {
              "name": "categoryAggregator",
              "type": "string",
              "description": "Aggregator to categorize data."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "grouped data."
          }
        },
        {
          "name": "__groupArray",
          "description": "Groups a array of objects",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 2
            },
            "end": {
              "line": 438,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array",
              "description": "array of objects to be grouped"
            },
            {
              "name": "groupCategory",
              "type": "(string | function)",
              "description": "property or a function to determine grouping"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "grouped object"
          }
        },
        {
          "name": "__forEach",
          "description": "Executes callback function for every record.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 445,
              "column": 2
            },
            "end": {
              "line": 454,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "array",
              "description": "array to repeat items"
            },
            {
              "name": "cb",
              "type": "function",
              "description": "Function to execute on all rows"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_restructureData",
          "description": "Computes a chart readble format of data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 2
            },
            "end": {
              "line": 509,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "array",
              "description": "data to be charted"
            },
            {
              "name": "category",
              "type": "Object",
              "description": "category to calssify"
            },
            {
              "name": "series",
              "type": "array",
              "description": "array of series information"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "formatted chart information to render."
          }
        },
        {
          "name": "_seriesChanged",
          "description": "Observer on 'series' to redraw based on series property.\nIf a series object has 'dataUrl' property , fetches data and uses it to render the chart.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 515,
              "column": 2
            },
            "end": {
              "line": 559,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataChanged",
          "description": "Observer to render chart when data changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 564,
              "column": 2
            },
            "end": {
              "line": 566,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showErrors",
          "description": "Checks if error message should be displayed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 572,
              "column": 2
            },
            "end": {
              "line": 574,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "flag to display error message"
          }
        },
        {
          "name": "_registerChangeStream",
          "description": "Registers a data stream to update the data",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 579,
              "column": 2
            },
            "end": {
              "line": 589,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_render",
          "description": "Renders chart inside the chart container using xCharts",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 597,
              "column": 2
            },
            "end": {
              "line": 621,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "Object",
              "description": "chart information to render"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataUrlChanged",
          "description": "Observer on 'dataUrl' to fetch new data when the property is changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 626,
              "column": 2
            },
            "end": {
              "line": 637,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_calcClass",
          "description": "Computes the CSS class name for chart container.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 647,
              "column": 2
            },
            "end": {
              "line": 655,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "array",
              "description": "data to render chart"
            },
            {
              "name": "series",
              "type": "array",
              "description": "data to group the chart data"
            },
            {
              "name": "category",
              "type": "string",
              "description": "property to classify chart data"
            },
            {
              "name": "hasDataFromSeries",
              "type": "boolean",
              "description": "flag denoting to get data from series."
            }
          ],
          "return": {
            "type": "string",
            "desc": "class name for chart container"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 656,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeChart",
      "attributes": [
        {
          "name": "chart-type",
          "description": "Rendered chart's type.\nSupported chart types :\narea, bubble, groupedbar, line, pareto, pie, donut, normalizedstackedcolumn, stackedbar, stackedcolumn, groupedcolumn, and mapview",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 128,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "data",
          "description": "Data used to render the chart , if dataUrl is provided this property is not needed.",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "category",
          "description": "Used to define the x-axis in chart.\nIt accepts a property name from individual elements of provided data.",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 6
            },
            "end": {
              "line": 154,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "category-aggregator",
          "description": "Option for the type of aggregation to be done on the category when the values are of 'date'.\nValues to be provided are : \"year\" , \"quarter\" , \"month\" or any DateUtil format like 'DD','MM',etc.",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "categorylabel-format",
          "description": "Prefix for the label of x-axis",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 176,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "series",
          "description": "Array of objects specifing how the data is rendered across category.\nThe objects should be of the below structure.\n\n```\n{\n 'property':'country',   //Property of the data to plot\n 'aggregation':'sum',    //Aggregation done on data for the property\n 'color':'red'           //Color of the portion of chart representing this data\n}\n```",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 196,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "data-url",
          "description": "Url to be used to fetch the data for the charts.",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "no-data-message",
          "description": "Empty state message when no data is found.",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-chart",
      "mixins": [
        "OECommonMixin"
      ]
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/area.js",
      "properties": [
        {
          "name": "dispatch",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 59
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 8
            },
            "end": {
              "line": 197,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 8
            },
            "end": {
              "line": 367,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 8
            },
            "end": {
              "line": 371,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 8
            },
            "end": {
              "line": 374,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 4
        },
        "end": {
          "line": 375,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "area"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/bubble.js",
      "properties": [
        {
          "name": "dispatch",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 4
            },
            "end": {
              "line": 336,
              "column": 61
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 8
            },
            "end": {
              "line": 193,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 326,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 8
            },
            "end": {
              "line": 330,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 8
            },
            "end": {
              "line": 333,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 4
        },
        "end": {
          "line": 334,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "bubble"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/grouped-bar.js",
      "properties": [],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 168,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 8
            },
            "end": {
              "line": 359,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 8
            },
            "end": {
              "line": 424,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originaldata"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 8
            },
            "end": {
              "line": 459,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 4
        },
        "end": {
          "line": 460,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "groupedBar"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/grouped-column.js",
      "properties": [],
      "methods": [
        {
          "name": "lineDraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "seriesForLineChart"
            },
            {
              "name": "data"
            },
            {
              "name": "that"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 403,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 8
            },
            "end": {
              "line": 749,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 751,
              "column": 8
            },
            "end": {
              "line": 867,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "OverlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 869,
              "column": 8
            },
            "end": {
              "line": 915,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 4
        },
        "end": {
          "line": 917,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "groupedColumn"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/line.js",
      "properties": [],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 184,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 8
            },
            "end": {
              "line": 335,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 8
            },
            "end": {
              "line": 339,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 8
            },
            "end": {
              "line": 342,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 4
        },
        "end": {
          "line": 343,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "line"
    },
    {
      "description": "©2016-2017 EdgeVerve Systems Limited (a fully owned Infosys subsidiary),\nBangalore, India. All Rights Reserved.",
      "summary": "",
      "path": "countries/topojson.js",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 6,
          "column": 24
        },
        "end": {
          "line": 481,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "TopoJson"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/map.js",
      "properties": [],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 8
            },
            "end": {
              "line": 424,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 425,
              "column": 8
            },
            "end": {
              "line": 430,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 431,
              "column": 8
            },
            "end": {
              "line": 468,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            },
            {
              "name": "oData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "renderData",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 469,
              "column": 8
            },
            "end": {
              "line": 506,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 507,
              "column": 8
            },
            "end": {
              "line": 513,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 4
        },
        "end": {
          "line": 514,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "map"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/normalized-stacked-column.js",
      "properties": [
        {
          "name": "dispatch",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 585,
              "column": 4
            },
            "end": {
              "line": 585,
              "column": 78
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 213,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 8
            },
            "end": {
              "line": 429,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 431,
              "column": 8
            },
            "end": {
              "line": 531,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 532,
              "column": 8
            },
            "end": {
              "line": 582,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 4
        },
        "end": {
          "line": 583,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "normalizedStackedColumn"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/pareto.js",
      "properties": [
        {
          "name": "dispatch",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 4
            },
            "end": {
              "line": 308,
              "column": 61
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 237,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 240,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 8
            },
            "end": {
              "line": 305,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 4
        },
        "end": {
          "line": 306,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "pareto"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/pie-or-donut.js",
      "properties": [],
      "methods": [
        {
          "name": "_removePreviousInstance",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 120,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawPieDonut",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 310,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "dd_series"
            },
            {
              "name": "data"
            },
            {
              "name": "color"
            },
            {
              "name": "noOfSlice"
            },
            {
              "name": "pie"
            },
            {
              "name": "outerRadius"
            },
            {
              "name": "h"
            },
            {
              "name": "arc"
            }
          ]
        },
        {
          "name": "drawPieLegends",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 8
            },
            "end": {
              "line": 481,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "data"
            },
            {
              "name": "margin"
            },
            {
              "name": "arc"
            },
            {
              "name": "biggerArc"
            },
            {
              "name": "outerRadius"
            },
            {
              "name": "h"
            },
            {
              "name": "color"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 483,
              "column": 8
            },
            "end": {
              "line": 698,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 700,
              "column": 8
            },
            "end": {
              "line": 706,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 4
        },
        "end": {
          "line": 707,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "pieOrDonut"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/stacked-bar.js",
      "properties": [
        {
          "name": "dispatch",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 658,
              "column": 4
            },
            "end": {
              "line": 658,
              "column": 65
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 8
            },
            "end": {
              "line": 235,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 8
            },
            "end": {
              "line": 490,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 491,
              "column": 8
            },
            "end": {
              "line": 612,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 613,
              "column": 8
            },
            "end": {
              "line": 654,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 4
        },
        "end": {
          "line": 655,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "stackedBar"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/stacked-column.js",
      "properties": [],
      "methods": [
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 196,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "redraw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 8
            },
            "end": {
              "line": 435,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "drawOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 8
            },
            "end": {
              "line": 509,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "overlappedData"
            },
            {
              "name": "originalData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 510,
              "column": 8
            },
            "end": {
              "line": 560,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 4
        },
        "end": {
          "line": 561,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "stackedColumn"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/x-chart.js",
      "properties": [],
      "methods": [
        {
          "name": "d3ShadowSelect",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ]
        },
        {
          "name": "addLinearFilter",
          "description": "Adds filter defination to the svg -- 3D illusion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addRadialFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "checkChart",
          "description": "Check if chart exists - Helper used by render function of xChart.chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chart"
            },
            {
              "name": "color"
            },
            {
              "name": "renderContainerId"
            },
            {
              "name": "chartOptions"
            }
          ]
        },
        {
          "name": "checkOverlapAndRemove",
          "description": "Removes overlapped ticks if the and returns true if the removed ticks cross the specified threshold",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ticks"
            },
            {
              "name": "orientation"
            }
          ]
        },
        {
          "name": "dataPrep",
          "description": "Used by groupedColumnChart for segregating line and bar series",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "draw_xAxisDummy",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "categories"
            },
            {
              "name": "height"
            },
            {
              "name": "width"
            },
            {
              "name": "renderContainerId"
            }
          ]
        },
        {
          "name": "overlapDataPrep",
          "description": "Prepare the data in a proper format to draw overlapped charts",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "Odata"
            },
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "wrap",
          "description": "Wraps the text labels in the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 4
            },
            "end": {
              "line": 433,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axisText"
            },
            {
              "name": "avaiableWidth"
            },
            {
              "name": "axisOrientation"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "tooltip",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "element"
            },
            {
              "name": "detailed"
            },
            {
              "name": "circular"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 7
        },
        "end": {
          "line": 438,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "XChartUtility"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/x-chart.js",
      "properties": [],
      "methods": [
        {
          "name": "d3ShadowSelect",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addLinearFilter",
          "description": "Adds filter defination to the svg -- 3D illusion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addRadialFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkChart",
          "description": "Check if chart exists - Helper used by render function of xChart.chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chart"
            },
            {
              "name": "color"
            },
            {
              "name": "renderContainerId"
            },
            {
              "name": "chartOptions"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkOverlapAndRemove",
          "description": "Removes overlapped ticks if the and returns true if the removed ticks cross the specified threshold",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ticks"
            },
            {
              "name": "orientation"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "dataPrep",
          "description": "Used by groupedColumnChart for segregating line and bar series",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "draw_xAxisDummy",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "categories"
            },
            {
              "name": "height"
            },
            {
              "name": "width"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "overlapDataPrep",
          "description": "Prepare the data in a proper format to draw overlapped charts",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "Odata"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "wrap",
          "description": "Wraps the text labels in the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 4
            },
            "end": {
              "line": 433,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axisText"
            },
            {
              "name": "avaiableWidth"
            },
            {
              "name": "axisOrientation"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "tooltip",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "element"
            },
            {
              "name": "detailed"
            },
            {
              "name": "circular"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addDefaultEventBehaviour",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 692,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "renderContainerId"
            },
            {
              "name": "chartOptions"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "registerEventHandler",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 695,
              "column": 4
            },
            "end": {
              "line": 711,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventList"
            },
            {
              "name": "renderContainerId"
            },
            {
              "name": "chartHost"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "registerSingleEvent",
          "description": "Custom event listener explicitly attached by the user",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 715,
              "column": 4
            },
            "end": {
              "line": 723,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_event"
            },
            {
              "name": "eventTarget"
            },
            {
              "name": "eventHandler"
            },
            {
              "name": "preventDefault"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 440,
          "column": 7
        },
        "end": {
          "line": 724,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "XChartUtility",
      "name": "XChartEvents"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/x-chart.js",
      "properties": [],
      "methods": [
        {
          "name": "d3ShadowSelect",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addLinearFilter",
          "description": "Adds filter defination to the svg -- 3D illusion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addRadialFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkChart",
          "description": "Check if chart exists - Helper used by render function of xChart.chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chart"
            },
            {
              "name": "color"
            },
            {
              "name": "renderContainerId"
            },
            {
              "name": "chartOptions"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkOverlapAndRemove",
          "description": "Removes overlapped ticks if the and returns true if the removed ticks cross the specified threshold",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ticks"
            },
            {
              "name": "orientation"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "dataPrep",
          "description": "Used by groupedColumnChart for segregating line and bar series",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "draw_xAxisDummy",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "categories"
            },
            {
              "name": "height"
            },
            {
              "name": "width"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "overlapDataPrep",
          "description": "Prepare the data in a proper format to draw overlapped charts",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "Odata"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "wrap",
          "description": "Wraps the text labels in the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 4
            },
            "end": {
              "line": 433,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axisText"
            },
            {
              "name": "avaiableWidth"
            },
            {
              "name": "axisOrientation"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "tooltip",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "element"
            },
            {
              "name": "detailed"
            },
            {
              "name": "circular"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "_init",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 735,
              "column": 4
            },
            "end": {
              "line": 786,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addEventHandler",
          "description": "Used before chart is drawn like we call setOptions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 791,
              "column": 4
            },
            "end": {
              "line": 841,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_event"
            },
            {
              "name": "eventTarget"
            },
            {
              "name": "eventHandler"
            },
            {
              "name": "preventDefault"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "registerEvent",
          "description": "Event Target is Unique Id",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 845,
              "column": 4
            },
            "end": {
              "line": 847,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "_event"
            },
            {
              "name": "eventTarget"
            },
            {
              "name": "eventHandler"
            },
            {
              "name": "preventDefault"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "if chartType is same triggers redraw",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 851,
              "column": 4
            },
            "end": {
              "line": 912,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "renderOverlap",
          "description": "Used for cascade filter",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 916,
              "column": 4
            },
            "end": {
              "line": 919,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeOverlap",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 921,
              "column": 4
            },
            "end": {
              "line": 923,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setOptions",
          "description": "Add keys from chartOptions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 926,
              "column": 4
            },
            "end": {
              "line": 962,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chartOptions"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 726,
          "column": 7
        },
        "end": {
          "line": 964,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "XChartUtility",
      "name": "XChart"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/x-chart.js",
      "properties": [],
      "methods": [
        {
          "name": "d3ShadowSelect",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addLinearFilter",
          "description": "Adds filter defination to the svg -- 3D illusion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addRadialFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkChart",
          "description": "Check if chart exists - Helper used by render function of xChart.chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chart"
            },
            {
              "name": "color"
            },
            {
              "name": "renderContainerId"
            },
            {
              "name": "chartOptions"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkOverlapAndRemove",
          "description": "Removes overlapped ticks if the and returns true if the removed ticks cross the specified threshold",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ticks"
            },
            {
              "name": "orientation"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "dataPrep",
          "description": "Used by groupedColumnChart for segregating line and bar series",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "draw_xAxisDummy",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "categories"
            },
            {
              "name": "height"
            },
            {
              "name": "width"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "overlapDataPrep",
          "description": "Prepare the data in a proper format to draw overlapped charts",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "Odata"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "wrap",
          "description": "Wraps the text labels in the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 4
            },
            "end": {
              "line": 433,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axisText"
            },
            {
              "name": "avaiableWidth"
            },
            {
              "name": "axisOrientation"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "tooltip",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "element"
            },
            {
              "name": "detailed"
            },
            {
              "name": "circular"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addQualitativeScale",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 992,
              "column": 4
            },
            "end": {
              "line": 1017,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "categories"
            },
            {
              "name": "innerPadding"
            },
            {
              "name": "outerPadding"
            }
          ]
        },
        {
          "name": "addQuantitativeScale",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1021,
              "column": 4
            },
            "end": {
              "line": 1073,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "series"
            },
            {
              "name": "aec"
            },
            {
              "name": "rangeMin"
            },
            {
              "name": "rangeMax"
            },
            {
              "name": "domainMin"
            },
            {
              "name": "domainMax"
            }
          ]
        },
        {
          "name": "draw",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1076,
              "column": 4
            },
            "end": {
              "line": 1165,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scale"
            },
            {
              "name": "drawPosition"
            },
            {
              "name": "axisId"
            },
            {
              "name": "axisLabelOverlap"
            }
          ]
        },
        {
          "name": "setOptions",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1168,
              "column": 4
            },
            "end": {
              "line": 1198,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axisOptions"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 966,
          "column": 7
        },
        "end": {
          "line": 1199,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "XChartUtility",
      "name": "XChartAxis"
    },
    {
      "description": "",
      "summary": "",
      "path": "charts-lib/x-chart.js",
      "properties": [],
      "methods": [
        {
          "name": "d3ShadowSelect",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addLinearFilter",
          "description": "Adds filter defination to the svg -- 3D illusion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "addRadialFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkChart",
          "description": "Check if chart exists - Helper used by render function of xChart.chart",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 207,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "chart"
            },
            {
              "name": "color"
            },
            {
              "name": "renderContainerId"
            },
            {
              "name": "chartOptions"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "checkOverlapAndRemove",
          "description": "Removes overlapped ticks if the and returns true if the removed ticks cross the specified threshold",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ticks"
            },
            {
              "name": "orientation"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "dataPrep",
          "description": "Used by groupedColumnChart for segregating line and bar series",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "draw_xAxisDummy",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "categories"
            },
            {
              "name": "height"
            },
            {
              "name": "width"
            },
            {
              "name": "renderContainerId"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "overlapDataPrep",
          "description": "Prepare the data in a proper format to draw overlapped charts",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 390,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "Odata"
            },
            {
              "name": "data"
            }
          ],
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "wrap",
          "description": "Wraps the text labels in the axis",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 4
            },
            "end": {
              "line": 433,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "axisText"
            },
            {
              "name": "avaiableWidth"
            },
            {
              "name": "axisOrientation"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "tooltip",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "svg"
            },
            {
              "name": "element"
            },
            {
              "name": "detailed"
            },
            {
              "name": "circular"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "XChartUtility"
        },
        {
          "name": "drawLegend",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1227,
              "column": 4
            },
            "end": {
              "line": 1392,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "position"
            },
            {
              "name": "svg"
            },
            {
              "name": "width"
            },
            {
              "name": "margin"
            }
          ]
        },
        {
          "name": "setOptions",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1395,
              "column": 4
            },
            "end": {
              "line": 1407,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "legendOptions"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 1201,
          "column": 7
        },
        "end": {
          "line": 1409,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "XChartUtility",
      "name": "XChartLegend"
    }
  ]
}
